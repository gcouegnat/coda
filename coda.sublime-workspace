{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "test/test1.cpp",
			"settings":
			{
				"buffer_size": 1337,
				"line_ending": "Unix"
			}
		},
		{
			"file": "coda/utils/version.h",
			"settings":
			{
				"buffer_size": 631,
				"line_ending": "Unix"
			}
		},
		{
			"file": "coda/linalg/Vector_impl.h",
			"settings":
			{
				"buffer_size": 10028,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "using namespace coda;\n\n//-----------------------------------------------------------------------------\n// prettyprint_state class implementation\n//-----------------------------------------------------------------------------\n\ninline prettyprint_state::prettyprint_state(const std::ostream& o)\n    : orig_flags(o.flags()), orig_precision(o.precision()), orig_width(o.width()), orig_fill(o.fill())\n{\n}\n\ninline void prettyprint_state::restore(std::ostream& o) const\n{\n    o.flags(orig_flags);\n    o.precision(orig_precision);\n    o.width(orig_width);\n    o.fill(orig_fill);\n}\n\n//-----------------------------------------------------------------------------\n// prettyprint class implementation\n//-----------------------------------------------------------------------------\n\ntemplate <typename eT>\ninline std::streamsize prettyprint::modifiy_stream(std::ostream& o, const eT* data, const uint nelem)\n{\n    std::streamsize width;\n    o.unsetf(std::ios::showbase);\n    o.unsetf(std::ios::uppercase);\n    o.unsetf(std::ios::showpos);\n    o.fill(' ');\n    bool use_scientific_layout = false;\n    for (int i = 0; i < nelem; ++i)\n    {\n        const eT val = data[i];\n        if( (val > eT(1000))\n                || (val < eT(-1000))\n                || ( (val > eT(0) ) && (val < eT(1e-4)))\n                || ( (val < eT(0) ) && (val > eT(-1e-4))))\n        {\n            use_scientific_layout = true;\n            break;\n        }\n    }\n    if (use_scientific_layout == true)\n    {\n        o.setf(std::ios::scientific);\n        o.setf(std::ios::right);\n        o.unsetf(std::ios::fixed);\n        o.precision(4);\n        width=13;\n    }\n    else\n    {\n        o.unsetf(std::ios::scientific);\n        o.setf(std::ios::right);\n        o.setf(std::ios::fixed);\n        o.precision(4);\n        width=10;\n    }\n    return width;\n}\n\ntemplate <typename eT>\ninline void prettyprint::print_elem(std::ostream& o, const eT& x)\n{\n    if(x != eT(0))\n    {\n        o << x;\n    }\n    else\n    {\n        prettyprint::print_zero<eT>(o);\n    }\n}\ntemplate <typename eT>\ninline void prettyprint::print_zero(std::ostream& o)\n{\n    const std::streamsize precision = o.precision();\n    o.precision(0);\n    o << eT(0);\n    o.precision(precision);\n}\n\ntemplate <typename eT>\ninline void prettyprint::print(std::ostream& o, Matrix<eT>& M)\n{\n    const prettyprint_state stream_state(o);\n    const std::streamsize width = prettyprint::modifiy_stream(o, M.memptr(), M.nelem);\n    const uint nrows = M.nrows;\n    const uint ncols = M.ncols;\n    for(uint i=0; i<nrows; ++i)\n    {\n        for(uint j=0; j<nrows; ++j)\n        {\n            o.width(width);\n            prettyprint::print_elem(o, M.at(i,j));\n            o << ' ';\n        }\n        o << '\\n';\n    }\n    o.flush();\n    stream_state.restore(o);\n}\n//-----------------------------------------------------------------------------\ntemplate <typename eT>\ninline void prettyprint::print(std::ostream& o, Vector<eT>& V)\n{\n    const prettyprint_state stream_state(o);\n    const std::streamsize width = modifiy_stream(o, V.memptr(), V.nelem);\n    const uint nelem = V.nelem;\n    for(uint i=0; i<nelem; ++i)\n    {\n        o.width(width);\n        print_elem(o, V[i]);\n        o << ' ';\n    }\n    o << '\\n';\n    o.flush();\n    stream_state.restore(o);\n}\n//-----------------------------------------------------------------------------\n\n\n",
			"file": "coda/log/prettyprint_impl.h",
			"file_size": 3342,
			"file_write_time": 1317852917000000,
			"settings":
			{
				"buffer_size": 3342,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 375.0,
		"selected_items":
		[
			[
				"",
				"Set Syntax: C"
			]
		],
		"width": 390.0
	},
	"console":
	{
		"height": 115.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": true,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/couegnat/dev/coda++/coda/coda.h",
		"/Users/couegnat/dev/coda++/coda/utils/version.h",
		"/Users/couegnat/dev/coda++/coda/linalg/cwise_op_impl.h",
		"/Users/couegnat/dev/coda++/coda/linalg/Matrix.h",
		"/Users/couegnat/dev/coda++/coda/linalg/Expr.h",
		"/Users/couegnat/dev/coda++/coda/linalg/CwiseExpr.h",
		"/Users/couegnat/dev/coda++/coda/linalg/cwise_expr_impl.h",
		"/Users/couegnat/dev/coda++/coda/linalg/Matrix_impl.h",
		"/Users/couegnat/dev/coda++/coda/linalg/CwiseExpr_impl.h",
		"/Users/couegnat/dev/coda++/coda/linalg/operators.h",
		"/Users/couegnat/dev/coda++/coda/linalg/functions.h",
		"/Users/couegnat/dev/coda++/coda/config/forward_decl.h",
		"/Users/couegnat/dev/coda++/coda/linalg/Proxy.h",
		"/Users/couegnat/dev/coda++/test/test1.cpp",
		"/Users/couegnat/dev/coda++/coda/linalg/Vector.h",
		"/Users/couegnat/dev/coda++/coda/linalg/Vector_impl.h",
		"/Users/couegnat/dev/coda++/coda/log/prettyprint_impl.h",
		"/Users/couegnat/dev/coda++/coda/linalg/op_times_impl.h",
		"/Users/couegnat/dev/coda++/coda/linalg/cwise_op.h",
		"/Users/couegnat/dev/coda++/coda/linalg/CwiseOp.h",
		"/Users/couegnat/dev/coda++/coda/linalg/CwiseOp_impl.h",
		"/Users/couegnat/dev/coda++/coda/linalg/cwise_expr.h",
		"/Users/couegnat/dev/coda++/.gitignore",
		"/Users/couegnat/dev/coda++/coda.sublime-project",
		"/Users/couegnat/dev/coda++/coda/config/config.h",
		"/Users/couegnat/dev/coda++/coda/utils/access.h",
		"/Users/couegnat/dev/coda++/coda/linalg/VectorBase.h",
		"/Users/couegnat/Library/Application Support/Sublime Text 2/Packages/C++/separator.sublime-snippet",
		"/Users/couegnat/dev/coda++/test/axpy.cpp",
		"/Users/couegnat/Library/Application Support/Sublime Text 2/Packages/User/Line separator",
		"/Users/couegnat/Library/Application Support/Sublime Text 2/Packages/User/Global.sublime-settings",
		"/Users/couegnat/Library/Application Support/Sublime Text 2/Packages/Default/Global.sublime-settings",
		"/Users/couegnat/Library/Application Support/Sublime Text 2/Packages/User/Base File.sublime-settings",
		"/Users/couegnat/dev/coda++/.sconsign.dblite",
		"/Users/couegnat/dev/coda++/coda/log/log.cpp",
		"/Users/couegnat/Library/Application Support/Sublime Text 2/Packages/Default/Base File.sublime-settings",
		"/Users/couegnat/dev/coda++/coda/debug/debug.h",
		"/Users/couegnat/dev/coda++/coda/linalg/Base.h",
		"/Users/couegnat/dev/coda++/coda/linalg/MatrixBase.h",
		"/Users/couegnat/dev/coda++/coda/log/prettyprint.h",
		"/Users/couegnat/dev/coda++/coda/linalg/DenseBase.h",
		"/Users/couegnat/dev/coda++/test/SConscript",
		"/Users/couegnat/.vim/vimrc",
		"/Users/couegnat/dev/coda++/coda/log/ostream.h",
		"/Users/couegnat/Documents/Codes/eigen/Eigen/src/Sparse/SparseMatrixBase.h",
		"/Users/couegnat/Documents/Codes/eigen/bench/benchmarkXcwise.cpp",
		"/Users/couegnat/Documents/Codes/eigen/Eigen/src/Sparse/SparseAssign.h",
		"/Users/couegnat/Documents/Codes/eigen/Eigen/src/Sparse/SparseBlock.h",
		"/Users/couegnat/Documents/Codes/eigen/Eigen/src/Sparse/SparseCwiseBinaryOp.h",
		"/Users/couegnat/Documents/Codes/eigen/lapack/single.cpp",
		"/Users/couegnat/Documents/Codes/eigen/Eigen/src/Core/util/Macros.h",
		"/Users/couegnat/dev/coda++/SConstruct",
		"/Users/couegnat/dev/coda++/lib/SConscript",
		"/Users/couegnat/dev/coda++/coda/utils/colors.h",
		"/Users/couegnat/Downloads/modules/modulefile-w-prereq-compl",
		"/Users/couegnat/Downloads/modules/modulefile-w-prereq-compl-and-mpi",
		"/Users/couegnat/Downloads/peepcode-036-mercurial-1-mov/peepcode-036-mercurial-1-code/peepcode-036-mercurial-1-code/moon_mission/lib/crew.rb",
		"/Users/couegnat/Downloads/debian/Makefile.par.inc"
	],
	"find":
	{
		"height": 33.0
	},
	"find_in_files":
	{
		"height": 85.0,
		"include_history":
		[
			""
		],
		"location_history":
		[
			"<open folders>",
			"/Users/couegnat/dev/coda++/coda/linalg",
			"/Users/couegnat/Documents/Codes/eigen/Eigen/src/Sparse",
			"/Users/couegnat/Documents/Codes/arma/trunk/include/armadillo_bits",
			"*.hpp",
			"<open folders>"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			",true",
			"Matrix",
			"CwiseExpr",
			"Matrix",
			"CwiseExpr",
			"Matrix",
			"CwiseOp",
			"Matrix",
			"CwiseOp",
			"         ",
			"B",
			"DenseBase<eT>::",
			"Matrix",
			"m.",
			"Matrix& m",
			"Vector& m",
			"m.",
			"Matrix",
			"BINARYOP",
			"BINARY",
			"PlainObject",
			"print",
			"reshape",
			"  }",
			"memptr",
			"print",
			"inline static",
			"inline",
			"set_size",
			"memptr()",
			"gemv",
			"arma_ignore",
			"ignore",
			"arma_ignore",
			"Glue",
			"Base",
			"arma_aligned",
			" >",
			"< ",
			"fill",
			"arma_debug_set_error",
			"internal::traits",
			"remove_reference",
			"Base",
			"lhs0",
			"lsh0",
			"scalar_product_traits",
			"ei_product_trait",
			"arma_hot",
			"Amesos",
			"amesos",
			"personnell",
			"[k]",
			"\n            return 0;\n        }\n\n        if (M->col[k] < 0) {\n            M->col[k] = j;\n            M->val[k] = x;\n            M->nnz++;\n            return 0;\n        }\n    }\n\n    ERROR(\"trying to acces to a non-exist",
			")"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"",
			"Vector",
			"MatrixCwiseExpr",
			"Vector",
			"MatrixCwiseExpr",
			"Vector",
			"MatrixCwiseOp",
			"Vector",
			"MatrixCwiseOp",
			"",
			"Vector",
			"v.",
			"Vector& v",
			"v.",
			"Vector",
			"EXPR",
			"inline",
			"inline static",
			">",
			"<"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "test/test1.cpp",
					"settings":
					{
						"buffer_size": 1337,
						"regions":
						{
						},
						"selection":
						[
							[
								1267,
								1267
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4.0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 586.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "coda/utils/version.h",
					"settings":
					{
						"buffer_size": 631,
						"regions":
						{
						},
						"selection":
						[
							[
								556,
								556
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "coda/linalg/Vector_impl.h",
					"settings":
					{
						"buffer_size": 10028,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4.0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 163.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "coda/log/prettyprint_impl.h",
					"settings":
					{
						"buffer_size": 3342,
						"regions":
						{
						},
						"selection":
						[
							[
								3213,
								3213
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4.0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1184.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"pre",
				"coda/log/prettyprint_impl.h"
			],
			[
				"vec",
				"coda/linalg/Vector_impl.h"
			],
			[
				"ver",
				"coda/utils/version.h"
			],
			[
				"tes",
				"test/test1.cpp"
			],
			[
				"test",
				"test/test1.cpp"
			],
			[
				"for",
				"coda/config/forward_decl.h"
			],
			[
				"prox",
				"coda/linalg/Proxy.h"
			],
			[
				"matr",
				"coda/linalg/Matrix.h"
			],
			[
				"coda",
				"coda/coda.h"
			],
			[
				"impl",
				"coda/linalg/Vector_impl.h"
			],
			[
				"mati",
				"coda/linalg/Matrix.h"
			],
			[
				"axy",
				"test/axpy.cpp"
			],
			[
				"",
				"coda/linalg/Vector_impl.h"
			],
			[
				"col",
				"trunk/include/armadillo_bits/Col_meat.hpp"
			],
			[
				"eg",
				"trunk/include/armadillo_bits/eGlue_meat.hpp"
			],
			[
				"mat",
				"trunk/include/armadillo_bits/Mat_bones.hpp"
			],
			[
				"arm",
				"trunk/include/armadillo"
			],
			[
				"forw",
				"trunk/include/armadillo_bits/forward_bones.hpp"
			],
			[
				"eglue",
				"trunk/include/armadillo_bits/eGlue_meat.hpp"
			],
			[
				"forwa",
				"trunk/include/armadillo_bits/forward_bones.hpp"
			],
			[
				"arra",
				"include/armadillo_bits/arrayops_meat.hpp"
			],
			[
				"array_",
				"trunk/include/armadillo_bits/arrayops_meat.hpp"
			],
			[
				"base",
				"trunk/include/armadillo_bits/Base.hpp"
			],
			[
				"op_inv",
				"trunk/include/armadillo_bits/op_inv_meat.hpp"
			],
			[
				"op",
				"tmp/op_misc_proto.hpp"
			],
			[
				"logger",
				"dolfin/log/Logger.cpp"
			],
			[
				"par",
				"dolfin/parameter/Parameters.h"
			],
			[
				"logmana",
				"dolfin/log/LogManager.h"
			],
			[
				"log",
				"dolfin/log/log.cpp"
			],
			[
				"lo",
				"dolfin/log/log.h"
			],
			[
				"epetra_cr",
				"epetra/src/Epetra_CrsMatrix.h"
			],
			[
				"epetra",
				"epetra/src/Epetra_BLAS.cpp"
			],
			[
				"epetra_",
				"epetra/src/Epetra_BLAS.h"
			],
			[
				"param",
				"base/include/base/parameter_handler.h"
			],
			[
				"control",
				"lac/source/solver_control.cc"
			],
			[
				"solver_control",
				"lac/include/lac/solver_control.h"
			],
			[
				"solver_sel",
				"lac/include/lac/solver_selector.h"
			],
			[
				"default",
				"dolfin/la/DefaultFactory.h"
			],
			[
				"vector",
				"dolfin/la/Vector.h"
			],
			[
				"perio",
				"src/periodic_forces.c"
			],
			[
				"impos",
				"src/impose_bc.c"
			],
			[
				"matrix",
				"HPC_Sparse_Matrix.hpp"
			],
			[
				"do",
				"include/coda.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"",
				"/Users/couegnat/Documents/Codes/arma/arma.sublime-project"
			],
			[
				"arl",
				"/Users/couegnat/Documents/Codes/arma/arma.sublime-project"
			]
		],
		"width": 380.0
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 274.0,
	"status_bar_visible": true
}
