!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACCESS_H	coda/utils/access.h	/^#define ACCESS_H$/;"	d
ARRAYOPS_H	coda/linalg/arrayops.h	/^#define ARRAYOPS_H$/;"	d
BASE_H	coda/linalg/Base.h	/^#define BASE_H$/;"	d
BINARYOP_H	coda/linalg/Expr.h	/^#define BINARYOP_H$/;"	d
Base	coda/linalg/Base.h	/^class Base$/;"	c	namespace:coda
BoolParameter	coda/parameter/Parameter.cpp	/^BoolParameter::BoolParameter (std::string key):Parameter (key), _value (0)$/;"	f	class:BoolParameter
BoolParameter	coda/parameter/Parameter.cpp	/^BoolParameter::BoolParameter (std::string key, bool value):Parameter (key),$/;"	f	class:BoolParameter
BoolParameter	coda/parameter/Parameter.h	/^class BoolParameter:public Parameter$/;"	c	namespace:coda
CODAPRETTYPRINT_H	coda/log/prettyprint.h	/^#define CODAPRETTYPRINT_H$/;"	d
CODA_CBLAS_H	coda/linalg/cblas.h	/^#define CODA_CBLAS_H$/;"	d
CODA_DEBUG	coda/config/config.h	/^#define CODA_DEBUG$/;"	d
CODA_DEBUG	coda/config/config.h	/^#undef CODA_DEBUG$/;"	d
CODA_EXTRA_DEBUG	coda/config/config.h	/^#undef CODA_EXTRA_DEBUG$/;"	d
CODA_FILELINE	coda/debug/debug.h	/^#define CODA_FILELINE /;"	d
CODA_FUNCNAME	coda/debug/debug.h	/^#define CODA_FUNCNAME /;"	d
CODA_H	coda/coda.h	/^#define CODA_H$/;"	d
CODA_STR1	coda/debug/debug.h	/^#define CODA_STR1(/;"	d
CODA_STR2	coda/debug/debug.h	/^#define CODA_STR2(/;"	d
CODA_VERSION_MAJOR	coda/utils/version.h	/^#define CODA_VERSION_MAJOR /;"	d
CODA_VERSION_MINOR	coda/utils/version.h	/^#define CODA_VERSION_MINOR /;"	d
CODA_VERSION_NAME	coda/utils/version.h	/^#define CODA_VERSION_NAME /;"	d
CODA_VERSION_PATCH	coda/utils/version.h	/^#define CODA_VERSION_PATCH /;"	d
COLORS_H	coda/utils/colors.h	/^#define COLORS_H$/;"	d
CONFIG_H	coda/config/config.h	/^#define CONFIG_H$/;"	d
CWISEBINARYOP_H	coda/linalg/CwiseExpr.h	/^#define CWISEBINARYOP_H$/;"	d
CWISEOP_H	coda/linalg/CwiseOp.h	/^#define CWISEOP_H$/;"	d
CWISE_OP_H	coda/linalg/cwise_op.h	/^#define CWISE_OP_H$/;"	d
DEBUG	coda/log/log.h	/^enum LogLevel {ERROR = 40, WARNING = 30, INFO = 20, PROGRESS = 15, DEBUG = 10, EXTRA_DEBUG = 5};$/;"	e	enum:coda::LogLevel
DEBUG_H	coda/debug/debug.h	/^#define DEBUG_H$/;"	d
DoubleParameter	coda/parameter/Parameter.cpp	/^DoubleParameter::DoubleParameter (std::string key):Parameter (key), _value (0)$/;"	f	class:DoubleParameter
DoubleParameter	coda/parameter/Parameter.cpp	/^DoubleParameter::DoubleParameter (std::string key, double value):Parameter (key),$/;"	f	class:DoubleParameter
DoubleParameter	coda/parameter/Parameter.h	/^class DoubleParameter:public Parameter$/;"	c	namespace:coda
EOP_CORE_H	coda/linalg/cwise_expr.h	/^#define EOP_CORE_H$/;"	d
ERROR	coda/log/log.h	/^enum LogLevel {ERROR = 40, WARNING = 30, INFO = 20, PROGRESS = 15, DEBUG = 10, EXTRA_DEBUG = 5};$/;"	e	enum:coda::LogLevel
EXTRA_DEBUG	coda/log/log.h	/^enum LogLevel {ERROR = 40, WARNING = 30, INFO = 20, PROGRESS = 15, DEBUG = 10, EXTRA_DEBUG = 5};$/;"	e	enum:coda::LogLevel
FORWARD_DECL_H	coda/config/forward_decl.h	/^#define FORWARD_DECL_H$/;"	d
FUNCTIONS_H	coda/linalg/functions.h	/^#define FUNCTIONS_H$/;"	d
GEMM_H	coda/linalg/gemm.h	/^#define GEMM_H$/;"	d
GEMV_H	coda/linalg/gemv.h	/^#define GEMV_H$/;"	d
GLOBALPARAMETER_H	coda/parameter/GlobalParameters.h	/^#define GLOBALPARAMETER_H$/;"	d
GlobalParameters	coda/parameter/GlobalParameters.cpp	/^GlobalParameters::GlobalParameters ():Parameters ("coda")$/;"	f	class:GlobalParameters
GlobalParameters	coda/parameter/GlobalParameters.h	/^class GlobalParameters:public Parameters$/;"	c	namespace:coda
INFO	coda/log/log.h	/^enum LogLevel {ERROR = 40, WARNING = 30, INFO = 20, PROGRESS = 15, DEBUG = 10, EXTRA_DEBUG = 5};$/;"	e	enum:coda::LogLevel
IntParameter	coda/parameter/Parameter.cpp	/^IntParameter::IntParameter (std::string key):Parameter (key), _value (0)$/;"	f	class:IntParameter
IntParameter	coda/parameter/Parameter.cpp	/^IntParameter::IntParameter (std::string key, int value):Parameter (key),$/;"	f	class:IntParameter
IntParameter	coda/parameter/Parameter.h	/^class IntParameter:public Parameter$/;"	c	namespace:coda
LOG_H	coda/log/log.h	/^#define LOG_H$/;"	d
LogLevel	coda/log/log.h	/^enum LogLevel {ERROR = 40, WARNING = 30, INFO = 20, PROGRESS = 15, DEBUG = 10, EXTRA_DEBUG = 5};$/;"	g	namespace:coda
M	coda/linalg/Unwrap.h	/^    const Matrix<eT> M;$/;"	m	class:coda::Unwrap
M	coda/linalg/Unwrap.h	/^    const Matrix<eT>& M;$/;"	m	class:coda::Unwrap
M	coda/linalg/Unwrap.h	/^    const Vector<eT>& M;$/;"	m	class:coda::Unwrap
MATRIXBASE_H	coda/linalg/MatrixBase.h	/^#define MATRIXBASE_H$/;"	d
MATRIX_H	coda/linalg/Matrix.h	/^#define MATRIX_H$/;"	d
Matrix	coda/linalg/Matrix.h	/^class Matrix : public MatrixBase< Matrix<eT> >$/;"	c	namespace:coda
Matrix	coda/linalg/Matrix_impl.h	/^inline Matrix<eT>::Matrix()$/;"	f	class:Matrix
Matrix	coda/linalg/Matrix_impl.h	/^inline Matrix<eT>::Matrix(const Matrix<eT>& m)$/;"	f	class:Matrix
Matrix	coda/linalg/Matrix_impl.h	/^inline Matrix<eT>::Matrix(const MatrixCwiseExpr<T1, T2, op_type>& op) : nrows(0), ncols(0), nelem(0) ,mem(mem)$/;"	f	class:Matrix
Matrix	coda/linalg/Matrix_impl.h	/^inline Matrix<eT>::Matrix(const MatrixCwiseOp<T1, op_type>& op) : nrows(0), ncols(0), nelem(0) ,mem(0)$/;"	f	class:Matrix
Matrix	coda/linalg/Matrix_impl.h	/^inline Matrix<eT>::Matrix(const MatrixExpr<T1, T2, op_type>& op) : nrows(0), ncols(0), nelem(0) ,mem(mem)$/;"	f	class:Matrix
Matrix	coda/linalg/Matrix_impl.h	/^inline Matrix<eT>::Matrix(const MatrixOp<T1, op_type>& op) : nrows(0), ncols(0), nelem(0), mem(mem)$/;"	f	class:Matrix
Matrix	coda/linalg/Matrix_impl.h	/^inline Matrix<eT>::Matrix(uint in_rows, uint in_cols)$/;"	f	class:Matrix
MatrixBase	coda/linalg/MatrixBase.h	/^class MatrixBase$/;"	c	namespace:coda
MatrixCwiseExpr	coda/linalg/CwiseExpr.h	/^class MatrixCwiseExpr : public MatrixBase< MatrixCwiseExpr<T1, T2, op_type> >$/;"	c	namespace:coda
MatrixCwiseExpr	coda/linalg/CwiseExpr_impl.h	/^MatrixCwiseExpr<T1, T2, op_type>::MatrixCwiseExpr(const MatrixBase<T1>& in_A, const MatrixBase<T2>& in_B)$/;"	f	class:MatrixCwiseExpr
MatrixCwiseOp	coda/linalg/CwiseOp.h	/^class MatrixCwiseOp : public MatrixBase< MatrixCwiseOp<T1, op_type> >$/;"	c	namespace:coda
MatrixCwiseOp	coda/linalg/CwiseOp_impl.h	/^MatrixCwiseOp<T1, op_type>::MatrixCwiseOp(const MatrixBase<T1>& in_A) : lhs(in_A.derived()), val(val)$/;"	f	class:MatrixCwiseOp
MatrixCwiseOp	coda/linalg/CwiseOp_impl.h	/^MatrixCwiseOp<T1, op_type>::MatrixCwiseOp(const MatrixBase<T1>& in_A, typename T1::elem_type in_val) : lhs(in_A.derived()), val(in_val)$/;"	f	class:MatrixCwiseOp
MatrixExpr	coda/linalg/Expr.h	/^class MatrixExpr : public MatrixBase< MatrixExpr<T1, T2, op_type> >$/;"	c	namespace:coda
MatrixExpr	coda/linalg/Expr_impl.h	/^inline MatrixExpr<T1,T2,op_type>::MatrixExpr(const T1& in_A, const T2& in_B) : lhs(in_A), rhs(in_B)$/;"	f	class:MatrixExpr
MatrixOp	coda/linalg/Op.h	/^class MatrixOp : public MatrixBase< MatrixOp<T1, op_type> >$/;"	c	namespace:coda
MatrixOp	coda/linalg/Op_impl.h	/^MatrixOp<T1, op_type>::MatrixOp(const T1& in_A) : lhs(in_A)$/;"	f	class:MatrixOp
OPERATORS_H	coda/linalg/operators.h	/^#define OPERATORS_H$/;"	d
OP_H	coda/linalg/Op.h	/^#define OP_H$/;"	d
OP_INV_H	coda/linalg/op_inv.h	/^#define OP_INV_H$/;"	d
OP_TIMES_H	coda/linalg/op_times.h	/^#define OP_TIMES_H$/;"	d
OP_TRANS_H	coda/linalg/op_trans.h	/^#define OP_TRANS_H$/;"	d
P	coda/linalg/Proxy.h	/^    const Matrix<eT>&     P;$/;"	m	class:coda::Proxy
P	coda/linalg/Proxy.h	/^    const Matrix<elem_type>     P;$/;"	m	class:coda::Proxy
P	coda/linalg/Proxy.h	/^    const MatrixCwiseExpr<T1, T2, op_type>&     P;$/;"	m	class:coda::Proxy
P	coda/linalg/Proxy.h	/^    const MatrixCwiseOp<T1, op_type>&     P;$/;"	m	class:coda::Proxy
P	coda/linalg/Proxy.h	/^    const Vector<eT>&     P;$/;"	m	class:coda::Proxy
P	coda/linalg/Proxy.h	/^    const VectorCwiseExpr<T1, T2, op_type>&     P;$/;"	m	class:coda::Proxy
P	coda/linalg/Proxy.h	/^    const VectorCwiseOp<T1, op_type>&     P;$/;"	m	class:coda::Proxy
PARAMETERS_H	coda/parameter/Parameters.h	/^#define PARAMETERS_H$/;"	d
PARAMETER_H	coda/parameter/Parameter.h	/^#define PARAMETER_H$/;"	d
PROGRESS	coda/log/log.h	/^enum LogLevel {ERROR = 40, WARNING = 30, INFO = 20, PROGRESS = 15, DEBUG = 10, EXTRA_DEBUG = 5};$/;"	e	enum:coda::LogLevel
PROXY_H	coda/linalg/Proxy.h	/^#define PROXY_H$/;"	d
Parameter	coda/parameter/Parameter.cpp	/^Parameter::Parameter (std::string key):_key (key), _is_set (false)$/;"	f	class:Parameter
Parameter	coda/parameter/Parameter.h	/^class Parameter$/;"	c	namespace:coda
Parameters	coda/parameter/Parameters.cpp	/^Parameters::Parameters (std::string key):_key (key)$/;"	f	class:Parameters
Parameters	coda/parameter/Parameters.h	/^class Parameters$/;"	c	namespace:coda
Proxy	coda/linalg/Proxy.h	/^    inline Proxy(const T1& A)$/;"	f	class:coda::Proxy
Proxy	coda/linalg/Proxy.h	/^    inline explicit Proxy(const Matrix<eT>& M) : P(M)$/;"	f	class:coda::Proxy
Proxy	coda/linalg/Proxy.h	/^    inline explicit Proxy(const MatrixCwiseExpr<T1, T2, op_type>& O) : P(O)$/;"	f	class:coda::Proxy
Proxy	coda/linalg/Proxy.h	/^    inline explicit Proxy(const MatrixCwiseOp<T1, op_type>& O) : P(O)$/;"	f	class:coda::Proxy
Proxy	coda/linalg/Proxy.h	/^    inline explicit Proxy(const MatrixExpr<T1, T2, op_type>& O) : P(O)$/;"	f	class:coda::Proxy
Proxy	coda/linalg/Proxy.h	/^    inline explicit Proxy(const MatrixOp<T1, op_type>& O) : P(O)$/;"	f	class:coda::Proxy
Proxy	coda/linalg/Proxy.h	/^    inline explicit Proxy(const Vector<eT>& V) : P(V)$/;"	f	class:coda::Proxy
Proxy	coda/linalg/Proxy.h	/^    inline explicit Proxy(const VectorCwiseExpr<T1, T2, op_type>& O) : P(O)$/;"	f	class:coda::Proxy
Proxy	coda/linalg/Proxy.h	/^    inline explicit Proxy(const VectorCwiseOp<T1, op_type>& O) : P(O)$/;"	f	class:coda::Proxy
Proxy	coda/linalg/Proxy.h	/^class Proxy$/;"	c	namespace:coda
Proxy	coda/linalg/Proxy.h	/^class Proxy< Matrix<eT> >$/;"	c	namespace:coda
Proxy	coda/linalg/Proxy.h	/^class Proxy< MatrixCwiseExpr<T1, T2, op_type> >$/;"	c	namespace:coda
Proxy	coda/linalg/Proxy.h	/^class Proxy< MatrixCwiseOp<T1, op_type> >$/;"	c	namespace:coda
Proxy	coda/linalg/Proxy.h	/^class Proxy< MatrixExpr<T1, T2, op_type> >$/;"	c	namespace:coda
Proxy	coda/linalg/Proxy.h	/^class Proxy< MatrixOp<T1, op_type> >$/;"	c	namespace:coda
Proxy	coda/linalg/Proxy.h	/^class Proxy< Vector<eT> >$/;"	c	namespace:coda
Proxy	coda/linalg/Proxy.h	/^class Proxy< VectorCwiseExpr<T1, T2, op_type> >$/;"	c	namespace:coda
Proxy	coda/linalg/Proxy.h	/^class Proxy< VectorCwiseOp<T1, op_type> >$/;"	c	namespace:coda
RANDOM_H	coda/math/random.h	/^#define RANDOM_H$/;"	d
StringParameter	coda/parameter/Parameter.cpp	/^StringParameter::StringParameter (std::string key):Parameter (key), _value (0)$/;"	f	class:StringParameter
StringParameter	coda/parameter/Parameter.cpp	/^StringParameter::StringParameter (std::string key, std::string value):Parameter (key),$/;"	f	class:StringParameter
StringParameter	coda/parameter/Parameter.h	/^class StringParameter:public Parameter$/;"	c	namespace:coda
TIMER_H	coda/log/Timer.h	/^#define TIMER_H$/;"	d
TRAITS_H	coda/config/traits.h	/^#define TRAITS_H$/;"	d
TYPEDEF_H	coda/config/typedef.h	/^#define TYPEDEF_H$/;"	d
Timer	coda/log/Timer.cpp	/^Timer::Timer (std::string task)$/;"	f	class:Timer
Timer	coda/log/Timer.h	/^class Timer$/;"	c	namespace:coda
UNWRAP_H	coda/linalg/Unwrap.h	/^#define UNWRAP_H$/;"	d
Unwrap	coda/linalg/Unwrap.h	/^    inline Unwrap(const Matrix<eT>& A) : M(A)$/;"	f	class:coda::Unwrap
Unwrap	coda/linalg/Unwrap.h	/^    inline Unwrap(const T1& A) : M(A)$/;"	f	class:coda::Unwrap
Unwrap	coda/linalg/Unwrap.h	/^    inline Unwrap(const Vector<eT>& A) : M(A)$/;"	f	class:coda::Unwrap
Unwrap	coda/linalg/Unwrap.h	/^class Unwrap$/;"	c	namespace:coda
Unwrap	coda/linalg/Unwrap.h	/^class Unwrap< Matrix<eT> >$/;"	c	namespace:coda
Unwrap	coda/linalg/Unwrap.h	/^class Unwrap< Vector<eT> >$/;"	c	namespace:coda
VECTORBASE_H	coda/linalg/VectorBase.h	/^#define    VECTORBASE_H$/;"	d
VECTOR_H	coda/linalg/Vector.h	/^#define VECTOR_H$/;"	d
Vector	coda/linalg/Vector.h	/^class Vector : public VectorBase< Vector<eT> >$/;"	c	namespace:coda
Vector	coda/linalg/Vector_impl.h	/^inline Vector<eT>::Vector()$/;"	f	class:Vector
Vector	coda/linalg/Vector_impl.h	/^inline Vector<eT>::Vector(const Vector<eT>& v)$/;"	f	class:Vector
Vector	coda/linalg/Vector_impl.h	/^inline Vector<eT>::Vector(const VectorCwiseExpr<T1, T2, op_type>& op) : nelem(0) ,mem(mem)$/;"	f	class:Vector
Vector	coda/linalg/Vector_impl.h	/^inline Vector<eT>::Vector(const VectorCwiseOp<T1, op_type>& op) : nelem(0) ,mem(0)$/;"	f	class:Vector
Vector	coda/linalg/Vector_impl.h	/^inline Vector<eT>::Vector(const uint in_size) : nelem(0), mem(mem)$/;"	f	class:Vector
VectorBase	coda/linalg/VectorBase.h	/^class VectorBase$/;"	c	namespace:coda
VectorCwiseExpr	coda/linalg/CwiseExpr.h	/^class VectorCwiseExpr : public VectorBase< VectorCwiseExpr<T1, T2, op_type> >$/;"	c	namespace:coda
VectorCwiseExpr	coda/linalg/CwiseExpr_impl.h	/^VectorCwiseExpr<T1, T2, op_type>::VectorCwiseExpr(const VectorBase<T1>& in_A, const VectorBase<T2>& in_B)$/;"	f	class:VectorCwiseExpr
VectorCwiseOp	coda/linalg/CwiseOp.h	/^class VectorCwiseOp : public VectorBase< VectorCwiseOp<T1, op_type> >$/;"	c	namespace:coda
VectorCwiseOp	coda/linalg/CwiseOp_impl.h	/^VectorCwiseOp<T1, op_type>::VectorCwiseOp(const VectorBase<T1>& in_A) : lhs(in_A.derived()), val(val)$/;"	f	class:VectorCwiseOp
VectorCwiseOp	coda/linalg/CwiseOp_impl.h	/^VectorCwiseOp<T1, op_type>::VectorCwiseOp(const VectorBase<T1>& in_A, typename T1::elem_type in_val) : lhs(in_A.derived()), val(in_val)$/;"	f	class:VectorCwiseOp
WARNING	coda/log/log.h	/^enum LogLevel {ERROR = 40, WARNING = 30, INFO = 20, PROGRESS = 15, DEBUG = 10, EXTRA_DEBUG = 5};$/;"	e	enum:coda::LogLevel
__apply	coda/linalg/arrayops_impl.h	/^#define __apply(/;"	d
__apply	coda/linalg/arrayops_impl.h	/^#undef __apply$/;"	d
__apply	coda/linalg/cwise_expr_impl.h	/^#define __apply(/;"	d
__apply	coda/linalg/cwise_expr_impl.h	/^#undef __apply$/;"	d
__apply	coda/linalg/cwise_op_impl.h	/^#define __apply(/;"	d
__apply	coda/linalg/cwise_op_impl.h	/^#undef __apply$/;"	d
_is_set	coda/parameter/Parameter.h	/^    bool _is_set;$/;"	m	class:coda::Parameter
_key	coda/parameter/Parameter.h	/^    std::string _key;$/;"	m	class:coda::Parameter
_key	coda/parameter/Parameters.h	/^    std::string _key;$/;"	m	class:coda::Parameters
_parameters	coda/parameter/Parameters.h	/^    std::map < std::string, Parameter * >_parameters;$/;"	m	class:coda::Parameters
_stopped	coda/log/Timer.h	/^    bool _stopped;$/;"	m	class:coda::Timer
_t	coda/log/Timer.h	/^    double _t;$/;"	m	class:coda::Timer
_task	coda/log/Timer.h	/^    std::string _task;$/;"	m	class:coda::Timer
_time	coda/log/Timer.cpp	/^coda::_time ()$/;"	f	class:coda
_value	coda/parameter/Parameter.h	/^    bool _value;$/;"	m	class:coda::BoolParameter
_value	coda/parameter/Parameter.h	/^    double _value;$/;"	m	class:coda::DoubleParameter
_value	coda/parameter/Parameter.h	/^    int _value;$/;"	m	class:coda::IntParameter
_value	coda/parameter/Parameter.h	/^    std::string _value;$/;"	m	class:coda::StringParameter
abs	coda/linalg/functions.h	/^inline const MatrixCwiseOp<T1, op_abs> abs(const MatrixBase<T1>& X)$/;"	f	namespace:coda
abs	coda/linalg/functions.h	/^inline const VectorCwiseOp<T1, op_abs> abs(const VectorBase<T1>& X)$/;"	f	namespace:coda
access	coda/utils/access.h	/^struct access$/;"	s
add	coda/parameter/Parameters.cpp	/^Parameters::add (std::string key, bool value)$/;"	f	class:Parameters
add	coda/parameter/Parameters.cpp	/^Parameters::add (std::string key, const char *value)$/;"	f	class:Parameters
add	coda/parameter/Parameters.cpp	/^Parameters::add (std::string key, double value)$/;"	f	class:Parameters
add	coda/parameter/Parameters.cpp	/^Parameters::add (std::string key, int value)$/;"	f	class:Parameters
add	coda/parameter/Parameters.cpp	/^Parameters::add (std::string key, std::string value)$/;"	f	class:Parameters
apply	coda/linalg/gemm.h	/^    inline static void apply(Matrix<eT>& C, const Matrix<eT>& A, const Matrix<eT>& B, const eT alpha = eT(1), const eT beta = eT(0))$/;"	f	class:coda::gemm
apply	coda/linalg/gemv.h	/^  inline static void apply(eT* y, const Matrix<eT>& A, const eT* x, const eT alpha = eT(1), const eT beta = eT(0))$/;"	f	class:coda::gemv
apply	coda/linalg/op_inv_impl.h	/^inline void op_inv::apply(Matrix<typename T1::elem_type>& out, const MatrixOp<T1, op_inv>& X)$/;"	f	class:op_inv
apply	coda/linalg/op_times_impl.h	/^inline void op_times::apply(Matrix<eT>& out, const Matrix<eT>& A, const Matrix<eT>& B)$/;"	f	class:op_times
apply	coda/linalg/op_times_impl.h	/^inline void op_times::apply(Matrix<typename T1::elem_type>& out, const MatrixExpr<T1,T2,op_times>& X)$/;"	f	class:op_times
apply	coda/linalg/op_trans_impl.h	/^inline  void op_trans::apply(Matrix<eT>& out, const Matrix<eT>& in)$/;"	f	class:op_trans
apply	coda/linalg/op_trans_impl.h	/^inline void op_trans::apply(Matrix<typename T1::elem_type>& out, const MatrixOp<T1, op_trans>& X)$/;"	f	class:op_trans
apply_inplace_plus	coda/linalg/op_times_impl.h	/^inline void op_times::apply_inplace_plus(Matrix<typename T1::elem_type>& out, const MatrixExpr<T1,T2,op_times>& X)$/;"	f	class:op_times
arrayops	coda/linalg/arrayops.h	/^class arrayops$/;"	c	namespace:coda
as_string	coda/utils/version.h	/^		static inline std::string as_string()$/;"	f	struct:coda::coda_version
at	coda/linalg/CwiseExpr_impl.h	/^typename T1::elem_type MatrixCwiseExpr<T1, T2, op_type>::at (const uint i, const uint j) const$/;"	f	class:MatrixCwiseExpr
at	coda/linalg/CwiseOp_impl.h	/^typename T1::elem_type MatrixCwiseOp<T1, op_type>::at (const uint i, const uint j) const$/;"	f	class:MatrixCwiseOp
at	coda/linalg/Matrix_impl.h	/^inline eT  Matrix<eT>::at (const uint i, const uint j) const$/;"	f	class:Matrix
at	coda/linalg/Matrix_impl.h	/^inline eT& Matrix<eT>::at (const uint i, const uint j)$/;"	f	class:Matrix
at	coda/linalg/Proxy.h	/^    inline elem_type at (const uint i, const uint j)    const$/;"	f	class:coda::Proxy
at	coda/linalg/Proxy.h	/^    inline elem_type at (const uint i, const uint j) const { return P.at(i,j); }$/;"	f	class:coda::Proxy
at	coda/linalg/Proxy.h	/^    inline elem_type at (const uint i, const uint j) const$/;"	f	class:coda::Proxy
at	coda/linalg/Vector_impl.h	/^inline eT  Vector<eT>::at (const uint i) const$/;"	f	class:Vector
at	coda/linalg/Vector_impl.h	/^inline eT& Vector<eT>::at (const uint i)$/;"	f	class:Vector
basis	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::basis(const uint i)$/;"	f	class:Vector
blue	coda/utils/colors.h	/^const std::string blue = "\\033[34m";$/;"	m	namespace:coda::colors
bold	coda/utils/colors.h	/^const std::string bold = "\\033[1m";$/;"	m	namespace:coda::colors
buffer	coda/log/log.cpp	/^static char buffer[buffer_size];$/;"	v	file:
buffer_size	coda/log/log.cpp	/^static const int buffer_size = 256;$/;"	v	file:
cblas	coda/linalg/cblas.h	/^namespace cblas$/;"	n	namespace:coda
clear	coda/parameter/Parameters.cpp	/^Parameters::clear ()$/;"	f	class:Parameters
coda	coda/config/config.h	/^namespace coda$/;"	n
coda	coda/config/forward_decl.h	/^namespace coda$/;"	n
coda	coda/config/traits.h	/^namespace coda$/;"	n
coda	coda/config/typedef.h	/^namespace coda$/;"	n
coda	coda/debug/debug.h	/^namespace coda$/;"	n
coda	coda/linalg/Base.h	/^namespace coda$/;"	n
coda	coda/linalg/CwiseExpr.h	/^namespace coda$/;"	n
coda	coda/linalg/CwiseOp.h	/^namespace coda$/;"	n
coda	coda/linalg/Expr.h	/^namespace coda$/;"	n
coda	coda/linalg/Matrix.h	/^namespace coda$/;"	n
coda	coda/linalg/MatrixBase.h	/^namespace coda$/;"	n
coda	coda/linalg/Op.h	/^namespace coda$/;"	n
coda	coda/linalg/Proxy.h	/^namespace coda$/;"	n
coda	coda/linalg/Unwrap.h	/^namespace coda$/;"	n
coda	coda/linalg/Vector.h	/^namespace coda$/;"	n
coda	coda/linalg/VectorBase.h	/^namespace coda$/;"	n
coda	coda/linalg/arrayops.h	/^namespace coda$/;"	n
coda	coda/linalg/cblas.h	/^namespace coda$/;"	n
coda	coda/linalg/cwise_expr.h	/^namespace coda$/;"	n
coda	coda/linalg/cwise_op.h	/^namespace coda$/;"	n
coda	coda/linalg/functions.h	/^namespace coda$/;"	n
coda	coda/linalg/gemm.h	/^namespace coda$/;"	n
coda	coda/linalg/gemv.h	/^namespace coda$/;"	n
coda	coda/linalg/op_inv.h	/^namespace coda$/;"	n
coda	coda/linalg/op_times.h	/^namespace coda$/;"	n
coda	coda/linalg/op_trans.h	/^namespace coda$/;"	n
coda	coda/linalg/operators.h	/^namespace coda$/;"	n
coda	coda/log/Timer.h	/^namespace coda$/;"	n
coda	coda/log/log.h	/^namespace coda$/;"	n
coda	coda/log/prettyprint.h	/^namespace coda$/;"	n
coda	coda/math/random.h	/^namespace coda$/;"	n
coda	coda/parameter/GlobalParameters.h	/^namespace coda$/;"	n
coda	coda/parameter/Parameter.h	/^namespace coda$/;"	n
coda	coda/parameter/Parameters.h	/^namespace coda$/;"	n
coda	coda/utils/colors.h	/^namespace coda$/;"	n
coda	coda/utils/version.h	/^namespace coda$/;"	n
coda_assert	coda/debug/debug.h	/^inline void coda_assert(const bool state, std::string msg)$/;"	f	namespace:coda
coda_assert_mult_size	coda/debug/debug.h	/^inline void coda_assert_mult_size(const uint nrows1, const uint ncols1, const uint nrows2, const uint ncols2, std::string msg)$/;"	f	namespace:coda
coda_assert_same_size	coda/debug/debug.h	/^inline void coda_assert_same_size(const uint nrows1, const uint ncols1, const uint nrows2, const uint ncols2, std::string msg)$/;"	f	namespace:coda
coda_debug_assert	coda/debug/debug.h	/^#define coda_debug_assert(/;"	d
coda_debug_assert_mult_size	coda/debug/debug.h	/^#define coda_debug_assert_mult_size /;"	d
coda_debug_assert_same_size	coda/debug/debug.h	/^#define coda_debug_assert_same_size /;"	d
coda_debug_error	coda/debug/debug.h	/^#define coda_debug_error(/;"	d
coda_debug_print	coda/debug/debug.h	/^#define coda_debug_print(/;"	d
coda_debug_var	coda/debug/debug.h	/^#define coda_debug_var(/;"	d
coda_debug_warning	coda/debug/debug.h	/^#define coda_debug_warning(/;"	d
coda_dummy	coda/debug/debug.h	/^inline void coda_dummy()$/;"	f	namespace:coda
coda_endl	coda/debug/debug.h	/^inline void coda_endl()$/;"	f	namespace:coda
coda_extra_debug_funcname	coda/debug/debug.h	/^#define coda_extra_debug_funcname /;"	d
coda_extra_debug_info	coda/debug/debug.h	/^#define coda_extra_debug_info(/;"	d
coda_extra_debug_print	coda/debug/debug.h	/^#define coda_extra_debug_print(/;"	d
coda_extra_debug_warning	coda/debug/debug.h	/^#define coda_extra_debug_warning(/;"	d
coda_funcname	coda/debug/debug.h	/^inline void coda_funcname(const char* x)$/;"	f	namespace:coda
coda_print	coda/debug/debug.h	/^inline void coda_print(const T1& msg)$/;"	f	namespace:coda
coda_version	coda/utils/version.h	/^	struct coda_version$/;"	s	namespace:coda
colors	coda/utils/colors.h	/^namespace colors$/;"	n	namespace:coda
const_parameter_iterator	coda/parameter/Parameters.cpp	/^    const_parameter_iterator;$/;"	t	file:
copy	coda/linalg/arrayops_impl.h	/^inline void arrayops::copy(eT* dest, const eT* src, const uint nelem)$/;"	f	class:arrayops
cwise_expr	coda/linalg/cwise_expr.h	/^struct cwise_expr$/;"	s	namespace:coda
cwise_op	coda/linalg/cwise_op.h	/^struct cwise_op$/;"	s	namespace:coda
cyan	coda/utils/colors.h	/^const std::string cyan = "\\033[36m";$/;"	m	namespace:coda::colors
default_parameters	coda/parameter/GlobalParameters.h	/^    static Parameters default_parameters()$/;"	f	class:coda::GlobalParameters
derived	coda/linalg/Base.h	/^    inline const Derived& derived() const$/;"	f	class:coda::Base
derived	coda/linalg/MatrixBase.h	/^    inline const Derived& derived() const$/;"	f	class:coda::MatrixBase
derived	coda/linalg/VectorBase.h	/^    inline const Derived& derived() const$/;"	f	class:coda::VectorBase
do_trans	coda/linalg/Unwrap.h	/^    static const bool do_trans = false;$/;"	m	class:coda::Unwrap
dot	coda/linalg/cblas.h	/^inline double dot(const int n, const double* x, const double* y)$/;"	f	namespace:coda::cblas
dot	coda/linalg/cblas.h	/^inline eT dot(const int n, const eT* x, const eT* y)$/;"	f	namespace:coda::cblas
dot	coda/linalg/cblas.h	/^inline float dot(const int n, const float* x, const float* y)$/;"	f	namespace:coda::cblas
eT	coda/linalg/Unwrap.h	/^    typedef typename T1::elem_type eT;$/;"	t	class:coda::Unwrap
elem_type	coda/linalg/CwiseExpr.h	/^    typedef typename T1::elem_type    elem_type;$/;"	t	class:coda::MatrixCwiseExpr
elem_type	coda/linalg/CwiseExpr.h	/^    typedef typename T1::elem_type    elem_type;$/;"	t	class:coda::VectorCwiseExpr
elem_type	coda/linalg/CwiseOp.h	/^    typedef typename T1::elem_type    elem_type;$/;"	t	class:coda::MatrixCwiseOp
elem_type	coda/linalg/CwiseOp.h	/^    typedef typename T1::elem_type    elem_type;$/;"	t	class:coda::VectorCwiseOp
elem_type	coda/linalg/Expr.h	/^    typedef typename T1::elem_type elem_type;$/;"	t	class:coda::MatrixExpr
elem_type	coda/linalg/Matrix.h	/^    typedef eT elem_type;$/;"	t	class:coda::Matrix
elem_type	coda/linalg/Op.h	/^    typedef typename T1::elem_type    elem_type;$/;"	t	class:coda::MatrixOp
elem_type	coda/linalg/Proxy.h	/^    typedef eT             elem_type;$/;"	t	class:coda::Proxy
elem_type	coda/linalg/Proxy.h	/^    typedef typename T1::elem_type    elem_type;$/;"	t	class:coda::Proxy
elem_type	coda/linalg/Vector.h	/^    typedef eT  elem_type;$/;"	t	class:coda::Vector
error	coda/log/log.cpp	/^void coda::error (std::string msg, ...)$/;"	f	class:coda
fill	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::fill(const eT val)$/;"	f	class:Matrix
fill	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::fill(const eT val)$/;"	f	class:Vector
find_parameter	coda/parameter/Parameters.cpp	/^Parameters::find_parameter (std::string key) const$/;"	f	class:Parameters
gemm	coda/linalg/cblas.h	/^inline void gemm(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA,$/;"	f	namespace:coda::cblas
gemm	coda/linalg/gemm.h	/^class gemm$/;"	c	namespace:coda
gemv	coda/linalg/cblas.h	/^inline void gemv(const enum CBLAS_ORDER Order, const enum CBLAS_TRANSPOSE TransA, const int M, const int N,$/;"	f	namespace:coda::cblas
gemv	coda/linalg/gemv.h	/^  class gemv$/;"	c	namespace:coda
getrf	coda/linalg/cblas.h	/^inline void getrf(int* m, int* n, double* a, int* lda, int* ipiv, int* info)$/;"	f	namespace:coda::lapack
getrf	coda/linalg/cblas.h	/^inline void getrf(int* m, int* n, eT* a, int* lda, int* ipiv, int* info)$/;"	f	namespace:coda::lapack
getrf	coda/linalg/cblas.h	/^inline void getrf(int* m, int* n, float* a, int* lda, int* ipiv, int* info)$/;"	f	namespace:coda::lapack
getri	coda/linalg/cblas.h	/^inline void getri(int* n,  double* a, int* lda, int* ipiv, double* work, int* lwork, int* info)$/;"	f	namespace:coda::lapack
getri	coda/linalg/cblas.h	/^inline void getri(int* n,  eT* a, int* lda, int* ipiv, eT* work, int* lwork, int* info)$/;"	f	namespace:coda::lapack
getri	coda/linalg/cblas.h	/^inline void getri(int* n,  float* a, int* lda, int* ipiv, float* work, int* lwork, int* info)$/;"	f	namespace:coda::lapack
green	coda/utils/colors.h	/^const std::string green = "\\033[32m";$/;"	m	namespace:coda::colors
grey	coda/utils/colors.h	/^const std::string grey = "\\033[30m";$/;"	m	namespace:coda::colors
has_key	coda/parameter/Parameters.cpp	/^Parameters::has_key (std::string key) const$/;"	f	class:Parameters
info	coda/log/log.cpp	/^void coda::info (std::string msg, ...)$/;"	f	class:coda
init	coda/linalg/Matrix_impl.h	/^inline void Matrix<eT>::init(uint in_rows, uint in_cols)$/;"	f	class:Matrix
init	coda/linalg/Vector_impl.h	/^inline void Vector<eT>::init(const uint in_nelem)$/;"	f	class:Vector
inplace_div	coda/linalg/arrayops_impl.h	/^inline  void arrayops::inplace_div(eT* dest, const eT val, const uint nelem)$/;"	f	class:arrayops
inplace_div	coda/linalg/arrayops_impl.h	/^inline  void arrayops::inplace_div(eT* dest, const eT* src, const uint nelem)$/;"	f	class:arrayops
inplace_minus	coda/linalg/arrayops_impl.h	/^inline  void arrayops::inplace_minus(eT* dest, const eT val, const uint nelem)$/;"	f	class:arrayops
inplace_minus	coda/linalg/arrayops_impl.h	/^inline  void arrayops::inplace_minus(eT* dest, const eT* src, const uint nelem)$/;"	f	class:arrayops
inplace_mult	coda/linalg/arrayops_impl.h	/^inline  void arrayops::inplace_mult(eT* dest, const eT val, const uint nelem)$/;"	f	class:arrayops
inplace_mult	coda/linalg/arrayops_impl.h	/^inline  void arrayops::inplace_mult(eT* dest, const eT* src, const uint nelem)$/;"	f	class:arrayops
inplace_plus	coda/linalg/arrayops_impl.h	/^inline  void arrayops::inplace_plus(eT* dest, const eT val, const uint nelem)$/;"	f	class:arrayops
inplace_plus	coda/linalg/arrayops_impl.h	/^inline  void arrayops::inplace_plus(eT* dest, const eT* src, const uint nelem)$/;"	f	class:arrayops
inplace_set	coda/linalg/arrayops_impl.h	/^inline  void arrayops::inplace_set(eT* dest, const eT val, const uint nelem)$/;"	f	class:arrayops
inv	coda/linalg/functions.h	/^inline const MatrixOp<T1, op_inv> inv(const MatrixBase<T1>& X)$/;"	f	namespace:coda
inv	coda/linalg/functions.h	/^inline const T1& inv(const MatrixOp<T1, op_inv>& X)$/;"	f	namespace:coda
is_same_type	coda/config/traits.h	/^struct is_same_type$/;"	s	namespace:coda
is_same_type	coda/config/traits.h	/^struct is_same_type<T1,T1>$/;"	s	namespace:coda
is_set	coda/parameter/Parameter.cpp	/^Parameter::is_set () const$/;"	f	class:Parameter
key	coda/parameter/Parameter.cpp	/^std::string Parameter::key ()  const$/;"	f	class:Parameter
lapack	coda/linalg/cblas.h	/^namespace lapack$/;"	n	namespace:coda
lhs	coda/linalg/CwiseExpr.h	/^    const Proxy<T1> lhs;$/;"	m	class:coda::MatrixCwiseExpr
lhs	coda/linalg/CwiseExpr.h	/^    const Proxy<T1> lhs;$/;"	m	class:coda::VectorCwiseExpr
lhs	coda/linalg/CwiseOp.h	/^    const Proxy<T1> lhs;$/;"	m	class:coda::MatrixCwiseOp
lhs	coda/linalg/CwiseOp.h	/^    const Proxy<T1> lhs;$/;"	m	class:coda::VectorCwiseOp
lhs	coda/linalg/Expr.h	/^    const T1& lhs;$/;"	m	class:coda::MatrixExpr
lhs	coda/linalg/Op.h	/^    const T1& lhs;$/;"	m	class:coda::MatrixOp
light_blue	coda/utils/colors.h	/^const std::string light_blue = "\\033[1;34m";$/;"	m	namespace:coda::colors
light_cyan	coda/utils/colors.h	/^const std::string light_cyan = "\\033[1;36m";$/;"	m	namespace:coda::colors
light_green	coda/utils/colors.h	/^const std::string light_green = "\\033[1;32m";$/;"	m	namespace:coda::colors
light_grey	coda/utils/colors.h	/^const std::string light_grey = "\\033[1;30m";$/;"	m	namespace:coda::colors
light_magenta	coda/utils/colors.h	/^const std::string light_magenta = "\\033[1;35m";$/;"	m	namespace:coda::colors
light_red	coda/utils/colors.h	/^const std::string light_red = "\\033[1;31m";$/;"	m	namespace:coda::colors
light_white	coda/utils/colors.h	/^const std::string light_white = "\\033[1;37m";$/;"	m	namespace:coda::colors
light_yellow	coda/utils/colors.h	/^const std::string light_yellow = "\\033[1;33m";$/;"	m	namespace:coda::colors
magenta	coda/utils/colors.h	/^const std::string magenta = "\\033[35m";$/;"	m	namespace:coda::colors
major	coda/utils/version.h	/^		static const unsigned int major = CODA_VERSION_MAJOR;$/;"	m	struct:coda::coda_version
mem	coda/linalg/Matrix.h	/^    const eT* const mem;$/;"	m	class:coda::Matrix
mem	coda/linalg/Vector.h	/^    const eT* const mem;$/;"	m	class:coda::Vector
memptr	coda/linalg/Matrix_impl.h	/^inline const eT* Matrix<eT>::memptr() const$/;"	f	class:Matrix
memptr	coda/linalg/Matrix_impl.h	/^inline eT* Matrix<eT>::memptr()$/;"	f	class:Matrix
memptr	coda/linalg/Vector_impl.h	/^inline const eT* Vector<eT>::memptr() const$/;"	f	class:Vector
memptr	coda/linalg/Vector_impl.h	/^inline eT* Vector<eT>::memptr()$/;"	f	class:Vector
minor	coda/utils/version.h	/^		static const unsigned int minor = CODA_VERSION_MINOR;	$/;"	m	struct:coda::coda_version
modifiy_stream	coda/log/prettyprint_impl.h	/^inline std::streamsize prettyprint::modifiy_stream(std::ostream& o, const eT* data, const uint nelem)$/;"	f	class:prettyprint
name	coda/parameter/Parameters.cpp	/^std::string Parameters::name ()  const$/;"	f	class:Parameters
ncols	coda/linalg/CwiseExpr_impl.h	/^uint MatrixCwiseExpr<T1, T2, op_type>::ncols() const$/;"	f	class:MatrixCwiseExpr
ncols	coda/linalg/CwiseOp_impl.h	/^uint MatrixCwiseOp<T1, op_type>::ncols() const$/;"	f	class:MatrixCwiseOp
ncols	coda/linalg/Matrix.h	/^    const uint ncols;$/;"	m	class:coda::Matrix
ncols	coda/linalg/Proxy.h	/^    uint ncols() const { return P.ncols(); }$/;"	f	class:coda::Proxy
ncols	coda/linalg/Proxy.h	/^    uint ncols() const { return P.ncols; }$/;"	f	class:coda::Proxy
ncols	coda/linalg/Proxy.h	/^    uint ncols() const$/;"	f	class:coda::Proxy
nelem	coda/linalg/CwiseExpr_impl.h	/^uint MatrixCwiseExpr<T1, T2, op_type>::nelem() const$/;"	f	class:MatrixCwiseExpr
nelem	coda/linalg/CwiseExpr_impl.h	/^uint VectorCwiseExpr<T1, T2, op_type>::nelem() const$/;"	f	class:VectorCwiseExpr
nelem	coda/linalg/CwiseOp_impl.h	/^uint MatrixCwiseOp<T1, op_type>::nelem() const$/;"	f	class:MatrixCwiseOp
nelem	coda/linalg/CwiseOp_impl.h	/^uint VectorCwiseOp<T1, op_type>::nelem() const$/;"	f	class:VectorCwiseOp
nelem	coda/linalg/Matrix.h	/^    const uint nelem;$/;"	m	class:coda::Matrix
nelem	coda/linalg/Proxy.h	/^    uint nelem() const { return P.nelem(); }$/;"	f	class:coda::Proxy
nelem	coda/linalg/Proxy.h	/^    uint nelem() const { return P.nelem; }$/;"	f	class:coda::Proxy
nelem	coda/linalg/Proxy.h	/^    uint nelem() const$/;"	f	class:coda::Proxy
nelem	coda/linalg/Vector.h	/^    const uint nelem;$/;"	m	class:coda::Vector
nocolor	coda/utils/colors.h	/^const std::string nocolor = "\\033[0m";$/;"	m	namespace:coda::colors
nrows	coda/linalg/CwiseExpr_impl.h	/^uint MatrixCwiseExpr<T1, T2, op_type>::nrows() const$/;"	f	class:MatrixCwiseExpr
nrows	coda/linalg/CwiseOp_impl.h	/^uint MatrixCwiseOp<T1, op_type>::nrows() const$/;"	f	class:MatrixCwiseOp
nrows	coda/linalg/Matrix.h	/^    const uint nrows;$/;"	m	class:coda::Matrix
nrows	coda/linalg/Proxy.h	/^    uint nrows() const { return P.nrows(); }$/;"	f	class:coda::Proxy
nrows	coda/linalg/Proxy.h	/^    uint nrows() const { return P.nrows; }$/;"	f	class:coda::Proxy
nrows	coda/linalg/Proxy.h	/^    uint nrows() const$/;"	f	class:coda::Proxy
ones	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::ones()$/;"	f	class:Matrix
ones	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::ones()$/;"	f	class:Vector
op_abs	coda/linalg/cwise_op.h	/^class op_abs                : public cwise_op<op_abs            >   {};$/;"	c	namespace:coda
op_div	coda/linalg/cwise_expr.h	/^class op_div    : public cwise_expr<op_div>      {};$/;"	c	namespace:coda
op_inv	coda/linalg/op_inv.h	/^class op_inv$/;"	c	namespace:coda
op_minus	coda/linalg/cwise_expr.h	/^class op_minus  : public cwise_expr<op_minus>    {};$/;"	c	namespace:coda
op_neg	coda/linalg/cwise_op.h	/^class op_neg                : public cwise_op<op_neg            >   {};$/;"	c	namespace:coda
op_plus	coda/linalg/cwise_expr.h	/^class op_plus   : public cwise_expr<op_plus>     {};$/;"	c	namespace:coda
op_ramp	coda/linalg/cwise_op.h	/^class op_ramp               : public cwise_op<op_ramp           >   {};$/;"	c	namespace:coda
op_scalar_div_post	coda/linalg/cwise_op.h	/^class op_scalar_div_post    : public cwise_op<op_scalar_div_post>   {};$/;"	c	namespace:coda
op_scalar_div_pre	coda/linalg/cwise_op.h	/^class op_scalar_div_pre     : public cwise_op<op_scalar_div_pre >   {};$/;"	c	namespace:coda
op_scalar_minus	coda/linalg/cwise_op.h	/^class op_scalar_minus       : public cwise_op<op_scalar_minus   >   {};$/;"	c	namespace:coda
op_scalar_plus	coda/linalg/cwise_op.h	/^class op_scalar_plus        : public cwise_op<op_scalar_plus    >   {};$/;"	c	namespace:coda
op_scalar_times	coda/linalg/cwise_op.h	/^class op_scalar_times       : public cwise_op<op_scalar_times   >   {};$/;"	c	namespace:coda
op_schur	coda/linalg/cwise_expr.h	/^class op_schur  : public cwise_expr<op_schur>    {};$/;"	c	namespace:coda
op_times	coda/linalg/op_times.h	/^class op_times$/;"	c	namespace:coda
op_trans	coda/linalg/op_trans.h	/^class op_trans$/;"	c	namespace:coda
operator %	coda/linalg/operators.h	/^inline const MatrixCwiseExpr<T1,T2, op_schur> operator% (const MatrixBase<T1>& lhs, const MatrixBase<T2>& rhs)$/;"	f	namespace:coda
operator %	coda/linalg/operators.h	/^inline const VectorCwiseExpr<T1,T2, op_schur> operator% (const VectorBase<T1>& lhs, const VectorBase<T2>& rhs)$/;"	f	namespace:coda
operator %=	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::operator%=(const Matrix& m)$/;"	f	class:Matrix
operator %=	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::operator%=(const MatrixCwiseExpr<T1, T2, op_type>& op)$/;"	f	class:Matrix
operator %=	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::operator%=(const MatrixCwiseOp<T1, op_type>& op)$/;"	f	class:Matrix
operator %=	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::operator%=(const Vector<eT>& v)$/;"	f	class:Vector
operator %=	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::operator%=(const VectorCwiseExpr<T1, T2, op_type>& op)$/;"	f	class:Vector
operator %=	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::operator%=(const VectorCwiseOp<T1, op_type>& op)$/;"	f	class:Vector
operator ()	coda/linalg/Matrix_impl.h	/^inline eT  Matrix<eT>::operator() (const uint i, const uint j) const$/;"	f	class:Matrix
operator ()	coda/linalg/Matrix_impl.h	/^inline eT& Matrix<eT>::operator() (const uint i, const uint j)$/;"	f	class:Matrix
operator *	coda/linalg/operators.h	/^inline const MatrixCwiseOp<T1, op_scalar_times> operator* (const MatrixBase<T1>& lhs, const typename T1::elem_type val)$/;"	f	namespace:coda
operator *	coda/linalg/operators.h	/^inline const MatrixCwiseOp<T1, op_scalar_times> operator* (const typename T1::elem_type val, const MatrixBase<T1>& lhs)$/;"	f	namespace:coda
operator *	coda/linalg/operators.h	/^inline const MatrixExpr<T1, T2, op_times> operator* (const MatrixBase<T1>& lhs, const MatrixBase<T2>& rhs)$/;"	f	namespace:coda
operator *	coda/linalg/operators.h	/^inline const VectorCwiseExpr<T1,T2, op_schur> operator* (const VectorBase<T1>& lhs, const VectorBase<T2>& rhs)$/;"	f	namespace:coda
operator *	coda/linalg/operators.h	/^inline const VectorCwiseOp<T1, op_scalar_times> operator* (const VectorBase<T1>& lhs, const typename T1::elem_type val)$/;"	f	namespace:coda
operator *	coda/linalg/operators.h	/^inline const VectorCwiseOp<T1, op_scalar_times> operator* (const typename T1::elem_type val, const VectorBase<T1>& lhs)$/;"	f	namespace:coda
operator *=	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::operator*=(const eT val)$/;"	f	class:Matrix
operator *=	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::operator*=(const eT val)$/;"	f	class:Vector
operator +	coda/linalg/operators.h	/^inline const MatrixCwiseExpr<T1,T2, op_plus> operator+ (const MatrixBase<T1>& lhs, const MatrixBase<T2>& rhs)$/;"	f	namespace:coda
operator +	coda/linalg/operators.h	/^inline const MatrixCwiseOp<T1, op_scalar_plus> operator+ (const MatrixBase<T1>& lhs, const typename T1::elem_type val)$/;"	f	namespace:coda
operator +	coda/linalg/operators.h	/^inline const MatrixCwiseOp<T1, op_scalar_plus> operator+ (const typename T1::elem_type val, const MatrixBase<T1>& lhs)$/;"	f	namespace:coda
operator +	coda/linalg/operators.h	/^inline const VectorCwiseExpr<T1,T2, op_plus> operator+ (const VectorBase<T1>& lhs, const VectorBase<T2>& rhs)$/;"	f	namespace:coda
operator +	coda/linalg/operators.h	/^inline const VectorCwiseOp<T1, op_scalar_plus> operator+ (const VectorBase<T1>& lhs, const typename T1::elem_type val)$/;"	f	namespace:coda
operator +	coda/linalg/operators.h	/^inline const VectorCwiseOp<T1, op_scalar_plus> operator+ (const typename T1::elem_type val, const VectorBase<T1>& lhs)$/;"	f	namespace:coda
operator +=	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::operator+= (const MatrixExpr<T1, T2, op_times>& op)$/;"	f	class:Matrix
operator +=	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::operator+=(const Matrix& m)$/;"	f	class:Matrix
operator +=	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::operator+=(const MatrixCwiseExpr<T1, T2, op_type>& op)$/;"	f	class:Matrix
operator +=	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::operator+=(const MatrixCwiseOp<T1, op_type>& op)$/;"	f	class:Matrix
operator +=	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::operator+=(const eT val)$/;"	f	class:Matrix
operator +=	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::operator+=(const Vector<eT>& v)$/;"	f	class:Vector
operator +=	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::operator+=(const VectorCwiseExpr<T1, T2, op_type>& op)$/;"	f	class:Vector
operator +=	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::operator+=(const VectorCwiseOp<T1, op_type>& op)$/;"	f	class:Vector
operator +=	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::operator+=(const eT val)$/;"	f	class:Vector
operator -	coda/linalg/operators.h	/^inline const MatrixCwiseExpr<T1,T2, op_minus> operator- (const MatrixBase<T1>& lhs, const MatrixBase<T2>& rhs)$/;"	f	namespace:coda
operator -	coda/linalg/operators.h	/^inline const MatrixCwiseOp<T1, op_neg> operator- (const MatrixBase<T1>& lhs)$/;"	f	namespace:coda
operator -	coda/linalg/operators.h	/^inline const MatrixCwiseOp<T1, op_scalar_minus> operator- (const MatrixBase<T1>& lhs, const typename T1::elem_type val)$/;"	f	namespace:coda
operator -	coda/linalg/operators.h	/^inline const MatrixCwiseOp<T1, op_scalar_minus> operator- (const typename T1::elem_type val, const MatrixBase<T1>& lhs)$/;"	f	namespace:coda
operator -	coda/linalg/operators.h	/^inline const VectorCwiseExpr<T1,T2, op_minus> operator- (const VectorBase<T1>& lhs, const VectorBase<T2>& rhs)$/;"	f	namespace:coda
operator -	coda/linalg/operators.h	/^inline const VectorCwiseOp<T1, op_neg> operator- (const VectorBase<T1>& lhs)$/;"	f	namespace:coda
operator -	coda/linalg/operators.h	/^inline const VectorCwiseOp<T1, op_scalar_minus> operator- (const VectorBase<T1>& lhs, const typename T1::elem_type val)$/;"	f	namespace:coda
operator -	coda/linalg/operators.h	/^inline const VectorCwiseOp<T1, op_scalar_minus> operator- (const typename T1::elem_type val, const VectorBase<T1>& lhs)$/;"	f	namespace:coda
operator -=	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::operator-=(const Matrix& m)$/;"	f	class:Matrix
operator -=	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::operator-=(const MatrixCwiseExpr<T1, T2, op_type>& op)$/;"	f	class:Matrix
operator -=	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::operator-=(const MatrixCwiseOp<T1, op_type>& op)$/;"	f	class:Matrix
operator -=	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::operator-=(const eT val)$/;"	f	class:Matrix
operator -=	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::operator-=(const Vector<eT>& v)$/;"	f	class:Vector
operator -=	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::operator-=(const VectorCwiseExpr<T1, T2, op_type>& op)$/;"	f	class:Vector
operator -=	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::operator-=(const VectorCwiseOp<T1, op_type>& op)$/;"	f	class:Vector
operator -=	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::operator-=(const eT val)$/;"	f	class:Vector
operator /	coda/linalg/operators.h	/^inline const MatrixCwiseExpr<T1,T2, op_div> operator\/ (const MatrixBase<T1>& lhs, const MatrixBase<T2>& rhs)$/;"	f	namespace:coda
operator /	coda/linalg/operators.h	/^inline const MatrixCwiseOp<T1, op_scalar_div_post> operator\/ (const MatrixBase<T1>& lhs, const typename T1::elem_type val)$/;"	f	namespace:coda
operator /	coda/linalg/operators.h	/^inline const MatrixCwiseOp<T1, op_scalar_div_pre> operator\/ (const typename T1::elem_type val, const MatrixBase<T1>& lhs)$/;"	f	namespace:coda
operator /	coda/linalg/operators.h	/^inline const VectorCwiseExpr<T1,T2, op_div> operator\/ (const VectorBase<T1>& lhs, const VectorBase<T2>& rhs)$/;"	f	namespace:coda
operator /	coda/linalg/operators.h	/^inline const VectorCwiseOp<T1, op_scalar_div_post> operator\/ (const VectorBase<T1>& lhs, const typename T1::elem_type val)$/;"	f	namespace:coda
operator /	coda/linalg/operators.h	/^inline const VectorCwiseOp<T1, op_scalar_div_pre> operator\/ (const typename T1::elem_type val, const VectorBase<T1>& lhs)$/;"	f	namespace:coda
operator /=	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::operator\/=(const Matrix& m)$/;"	f	class:Matrix
operator /=	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::operator\/=(const MatrixCwiseExpr<T1, T2, op_type>& op)$/;"	f	class:Matrix
operator /=	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::operator\/=(const MatrixCwiseOp<T1, op_type>& op)$/;"	f	class:Matrix
operator /=	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::operator\/=(const eT val)$/;"	f	class:Matrix
operator /=	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::operator\/=(const Vector<eT>& v)$/;"	f	class:Vector
operator /=	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::operator\/=(const VectorCwiseExpr<T1, T2, op_type>& op)$/;"	f	class:Vector
operator /=	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::operator\/=(const VectorCwiseOp<T1, op_type>& op)$/;"	f	class:Vector
operator /=	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::operator\/=(const eT val)$/;"	f	class:Vector
operator =	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::operator= (const MatrixExpr<T1, T2, op_type>& op)$/;"	f	class:Matrix
operator =	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::operator=(const Matrix& m)$/;"	f	class:Matrix
operator =	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::operator=(const MatrixCwiseExpr<T1, T2, op_type>& op)$/;"	f	class:Matrix
operator =	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::operator=(const MatrixCwiseOp<T1, op_type>& op)$/;"	f	class:Matrix
operator =	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::operator=(const MatrixOp<T1, op_type>& op)$/;"	f	class:Matrix
operator =	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::operator=(const Vector<eT>& v)$/;"	f	class:Vector
operator =	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::operator=(const VectorCwiseExpr<T1, T2, op_type>& op)$/;"	f	class:Vector
operator =	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::operator=(const VectorCwiseOp<T1, op_type>& op)$/;"	f	class:Vector
operator =	coda/parameter/Parameter.cpp	/^BoolParameter::operator= (bool value)$/;"	f	class:BoolParameter
operator =	coda/parameter/Parameter.cpp	/^DoubleParameter::operator= (double value)$/;"	f	class:DoubleParameter
operator =	coda/parameter/Parameter.cpp	/^IntParameter::operator= (int value)$/;"	f	class:IntParameter
operator =	coda/parameter/Parameter.cpp	/^Parameter::operator= (bool value)$/;"	f	class:Parameter
operator =	coda/parameter/Parameter.cpp	/^Parameter::operator= (double value)$/;"	f	class:Parameter
operator =	coda/parameter/Parameter.cpp	/^Parameter::operator= (int value)$/;"	f	class:Parameter
operator =	coda/parameter/Parameter.cpp	/^Parameter::operator= (std::string value)$/;"	f	class:Parameter
operator =	coda/parameter/Parameter.cpp	/^StringParameter::operator= (std::string value)$/;"	f	class:StringParameter
operator =	coda/parameter/Parameters.cpp	/^Parameters::operator= (const Parameters & parameters)$/;"	f	class:Parameters
operator []	coda/linalg/CwiseExpr_impl.h	/^typename T1::elem_type MatrixCwiseExpr<T1, T2, op_type>::operator[] (const uint i) const$/;"	f	class:MatrixCwiseExpr
operator []	coda/linalg/CwiseExpr_impl.h	/^typename T1::elem_type VectorCwiseExpr<T1, T2, op_type>::operator[] (const uint i) const$/;"	f	class:VectorCwiseExpr
operator []	coda/linalg/CwiseOp_impl.h	/^typename T1::elem_type MatrixCwiseOp<T1, op_type>::operator[] (const uint i) const$/;"	f	class:MatrixCwiseOp
operator []	coda/linalg/CwiseOp_impl.h	/^typename T1::elem_type VectorCwiseOp<T1, op_type>::operator[] (const uint i) const$/;"	f	class:VectorCwiseOp
operator []	coda/linalg/Matrix_impl.h	/^inline eT  Matrix<eT>::operator [] (const uint i) const$/;"	f	class:Matrix
operator []	coda/linalg/Matrix_impl.h	/^inline eT& Matrix<eT>::operator [] (const uint i)$/;"	f	class:Matrix
operator []	coda/linalg/Proxy.h	/^    inline elem_type operator[] (const uint i)             const$/;"	f	class:coda::Proxy
operator []	coda/linalg/Proxy.h	/^    inline elem_type operator[] (const uint i)       const$/;"	f	class:coda::Proxy
operator []	coda/linalg/Proxy.h	/^    inline elem_type operator[] (const uint i) const       { return P[i]; }$/;"	f	class:coda::Proxy
operator []	coda/linalg/Proxy.h	/^    inline elem_type operator[] (const uint i) const { return P[i]; }$/;"	f	class:coda::Proxy
operator []	coda/linalg/Vector_impl.h	/^inline eT  Vector<eT>::operator [] (const uint i) const$/;"	f	class:Vector
operator []	coda/linalg/Vector_impl.h	/^inline eT& Vector<eT>::operator [] (const uint i)$/;"	f	class:Vector
operator []	coda/parameter/Parameters.cpp	/^Parameter & Parameters::operator[](std::string key)$/;"	f	class:Parameters
operator []	coda/parameter/Parameters.cpp	/^Parameters::operator[] (std::string key)$/;"	f	class:Parameters
operator bool	coda/parameter/Parameter.cpp	/^BoolParameter::operator bool ()  const$/;"	f	class:BoolParameter
operator bool	coda/parameter/Parameter.cpp	/^Parameter::operator bool ()  const$/;"	f	class:Parameter
operator double	coda/parameter/Parameter.cpp	/^DoubleParameter::operator double ()$/;"	f	class:DoubleParameter
operator double	coda/parameter/Parameter.cpp	/^Parameter::operator double () const$/;"	f	class:Parameter
operator int	coda/parameter/Parameter.cpp	/^IntParameter::operator int ()$/;"	f	class:IntParameter
operator int	coda/parameter/Parameter.cpp	/^Parameter::operator int ()$/;"	f	class:Parameter
operator std::string	coda/parameter/Parameter.cpp	/^Parameter::operator std::string ()  const$/;"	f	class:Parameter
operator std::string	coda/parameter/Parameter.cpp	/^StringParameter::operator std::string ()  const$/;"	f	class:StringParameter
orig_fill	coda/log/prettyprint.h	/^    const char                orig_fill;$/;"	m	class:coda::prettyprint_state
orig_flags	coda/log/prettyprint.h	/^    const std::ios::fmtflags     orig_flags;$/;"	m	class:coda::prettyprint_state
orig_precision	coda/log/prettyprint.h	/^    const std::streamsize    orig_precision;$/;"	m	class:coda::prettyprint_state
orig_width	coda/log/prettyprint.h	/^    const std::streamsize    orig_width;$/;"	m	class:coda::prettyprint_state
parameter_iterator	coda/parameter/Parameters.cpp	/^    parameter_iterator;$/;"	t	file:
patch	coda/utils/version.h	/^		static const unsigned int patch = CODA_VERSION_PATCH;$/;"	m	struct:coda::coda_version
prettyprint	coda/log/prettyprint.h	/^class prettyprint$/;"	c	namespace:coda
prettyprint_state	coda/log/prettyprint.h	/^class prettyprint_state$/;"	c	namespace:coda
prettyprint_state	coda/log/prettyprint_impl.h	/^inline prettyprint_state::prettyprint_state(const std::ostream& o)$/;"	f	class:prettyprint_state
print	coda/linalg/Matrix_impl.h	/^inline void Matrix<eT>::print(std::string text)$/;"	f	class:Matrix
print	coda/linalg/Vector_impl.h	/^inline void Vector<eT>::print(const std::string text)$/;"	f	class:Vector
print	coda/log/prettyprint_impl.h	/^inline void prettyprint::print(std::ostream& o, Matrix<eT>& M)$/;"	f	class:prettyprint
print	coda/log/prettyprint_impl.h	/^inline void prettyprint::print(std::ostream& o, Vector<eT>& V)$/;"	f	class:prettyprint
print_elem	coda/log/prettyprint_impl.h	/^inline void prettyprint::print_elem(std::ostream& o, const eT& x)$/;"	f	class:prettyprint
print_zero	coda/log/prettyprint_impl.h	/^inline void prettyprint::print_zero(std::ostream& o)$/;"	f	class:prettyprint
process	coda/linalg/cwise_expr_impl.h	/^inline eT cwise_expr<op_type>::process(const eT a, const eT b)$/;"	f	class:cwise_expr
process	coda/linalg/cwise_expr_impl.h	/^template<> template<typename eT> const inline eT cwise_expr<op_div  >::process(const eT a, const eT b)$/;"	f	class:cwise_expr
process	coda/linalg/cwise_expr_impl.h	/^template<> template<typename eT> const inline eT cwise_expr<op_minus>::process(const eT a, const eT b)$/;"	f	class:cwise_expr
process	coda/linalg/cwise_expr_impl.h	/^template<> template<typename eT> const inline eT cwise_expr<op_plus >::process(const eT a, const eT b)$/;"	f	class:cwise_expr
process	coda/linalg/cwise_expr_impl.h	/^template<> template<typename eT> const inline eT cwise_expr<op_schur>::process(const eT a, const eT b)$/;"	f	class:cwise_expr
process	coda/linalg/cwise_op_impl.h	/^const inline eT cwise_op<op_abs >::process(const eT a, const eT val)$/;"	f	class:cwise_op
process	coda/linalg/cwise_op_impl.h	/^const inline eT cwise_op<op_neg >::process(const eT a, const eT val)$/;"	f	class:cwise_op
process	coda/linalg/cwise_op_impl.h	/^const inline eT cwise_op<op_ramp>::process(const eT a, const eT val)$/;"	f	class:cwise_op
process	coda/linalg/cwise_op_impl.h	/^const inline eT cwise_op<op_scalar_div_post >::process(const eT a, const eT val)$/;"	f	class:cwise_op
process	coda/linalg/cwise_op_impl.h	/^const inline eT cwise_op<op_scalar_div_pre  >::process(const eT a, const eT val)$/;"	f	class:cwise_op
process	coda/linalg/cwise_op_impl.h	/^const inline eT cwise_op<op_scalar_minus    >::process(const eT a, const eT val)$/;"	f	class:cwise_op
process	coda/linalg/cwise_op_impl.h	/^const inline eT cwise_op<op_scalar_plus>::process(const eT a, const eT val)$/;"	f	class:cwise_op
process	coda/linalg/cwise_op_impl.h	/^const inline eT cwise_op<op_scalar_times    >::process(const eT a, const eT val)$/;"	f	class:cwise_op
process	coda/linalg/cwise_op_impl.h	/^template <typename op_type> template <typename eT> inline eT cwise_op<op_type>::process(const eT a, const eT val)$/;"	f	class:cwise_op
ramp	coda/linalg/functions.h	/^inline const MatrixCwiseOp<T1, op_ramp> ramp(const MatrixBase<T1>& X)$/;"	f	namespace:coda
ramp	coda/linalg/functions.h	/^inline const VectorCwiseOp<T1, op_ramp> ramp(const VectorBase<T1>& X)$/;"	f	namespace:coda
rand_seeded	coda/math/random.h	/^bool rand_seeded = false;$/;"	m	namespace:coda
randu	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::randu()$/;"	f	class:Matrix
randu	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::randu()$/;"	f	class:Vector
randu	coda/math/random.h	/^inline eT randu()$/;"	f	namespace:coda
read	coda/log/log.cpp	/^#define read(/;"	d	file:
red	coda/utils/colors.h	/^const std::string red = "\\033[31m";$/;"	m	namespace:coda::colors
rename	coda/log/Timer.cpp	/^Timer::rename (std::string task)$/;"	f	class:Timer
rename	coda/parameter/Parameters.cpp	/^Parameters::rename (std::string key)$/;"	f	class:Parameters
reshape	coda/linalg/Matrix_impl.h	/^inline void Matrix<eT>::reshape(uint in_rows, uint in_cols)$/;"	f	class:Matrix
resize	coda/linalg/Matrix_impl.h	/^inline void Matrix<eT>::resize(uint in_rows, uint in_cols)$/;"	f	class:Matrix
resize	coda/linalg/Vector_impl.h	/^inline void Vector<eT>::resize(const uint in_nelem)$/;"	f	class:Vector
restore	coda/log/prettyprint_impl.h	/^inline void prettyprint_state::restore(std::ostream& o) const$/;"	f	class:prettyprint_state
rhs	coda/linalg/CwiseExpr.h	/^    const Proxy<T2> rhs;$/;"	m	class:coda::MatrixCwiseExpr
rhs	coda/linalg/CwiseExpr.h	/^    const Proxy<T2> rhs;$/;"	m	class:coda::VectorCwiseExpr
rhs	coda/linalg/Expr.h	/^    const T2& rhs;$/;"	m	class:coda::MatrixExpr
rw	coda/utils/access.h	/^    inline static T1& rw(const T1& x)$/;"	f	struct:access
set_log_level	coda/log/log.cpp	/^coda::set_log_level (int log_level)$/;"	f	class:coda
size	coda/linalg/Matrix_impl.h	/^inline uint Matrix<eT>::size()$/;"	f	class:Matrix
start	coda/log/Timer.cpp	/^Timer::start ()$/;"	f	class:Timer
stop	coda/log/Timer.cpp	/^Timer::stop ()$/;"	f	class:Timer
str	coda/parameter/Parameter.cpp	/^std::string BoolParameter::str ()  const$/;"	f	class:BoolParameter
str	coda/parameter/Parameter.cpp	/^std::string DoubleParameter::str ()  const$/;"	f	class:DoubleParameter
str	coda/parameter/Parameter.cpp	/^std::string IntParameter::str ()  const$/;"	f	class:IntParameter
str	coda/parameter/Parameter.cpp	/^std::string StringParameter::str ()  const$/;"	f	class:StringParameter
str	coda/parameter/Parameters.cpp	/^std::string Parameters::str (bool verbose) const$/;"	f	class:Parameters
symmetrize	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::symmetrize()$/;"	f	class:Matrix
trace	coda/linalg/functions.h	/^inline typename T1::elem_type trace(const MatrixBase<T1>& X)$/;"	f	namespace:coda
trans	coda/linalg/functions.h	/^inline const MatrixOp<T1, op_trans> trans(const MatrixBase<T1>& X)$/;"	f	namespace:coda
type_str	coda/parameter/Parameter.cpp	/^DoubleParameter::type_str () const$/;"	f	class:DoubleParameter
type_str	coda/parameter/Parameter.cpp	/^IntParameter::type_str () const$/;"	f	class:IntParameter
type_str	coda/parameter/Parameter.cpp	/^std::string BoolParameter::type_str ()  const$/;"	f	class:BoolParameter
type_str	coda/parameter/Parameter.cpp	/^std::string StringParameter::type_str ()  const$/;"	f	class:StringParameter
uint	coda/config/typedef.h	/^typedef unsigned int uint;$/;"	t	namespace:coda
val	coda/linalg/CwiseOp.h	/^    const elem_type val;$/;"	m	class:coda::MatrixCwiseOp
val	coda/linalg/CwiseOp.h	/^    const elem_type val;$/;"	m	class:coda::VectorCwiseOp
value	coda/config/traits.h	/^    static const bool value = false;$/;"	m	struct:coda::is_same_type
value	coda/config/traits.h	/^    static const bool value = true;$/;"	m	struct:coda::is_same_type
value	coda/log/Timer.cpp	/^Timer::value () const$/;"	f	class:Timer
value_str	coda/parameter/Parameter.cpp	/^std::string BoolParameter::value_str ()  const$/;"	f	class:BoolParameter
value_str	coda/parameter/Parameter.cpp	/^std::string DoubleParameter::value_str ()  const$/;"	f	class:DoubleParameter
value_str	coda/parameter/Parameter.cpp	/^std::string IntParameter::value_str ()  const$/;"	f	class:IntParameter
value_str	coda/parameter/Parameter.cpp	/^std::string StringParameter::value_str ()  const$/;"	f	class:StringParameter
warning	coda/log/log.cpp	/^void coda::warning (std::string msg, ...)$/;"	f	class:coda
white	coda/utils/colors.h	/^const std::string white = "\\033[37m";$/;"	m	namespace:coda::colors
yellow	coda/utils/colors.h	/^const std::string yellow = "\\033[33m";$/;"	m	namespace:coda::colors
zeros	coda/linalg/Matrix_impl.h	/^inline const Matrix<eT>& Matrix<eT>::zeros()$/;"	f	class:Matrix
zeros	coda/linalg/Vector_impl.h	/^inline const Vector<eT>& Vector<eT>::zeros()$/;"	f	class:Vector
~BoolParameter	coda/parameter/Parameter.cpp	/^BoolParameter::~BoolParameter ()$/;"	f	class:BoolParameter
~DoubleParameter	coda/parameter/Parameter.cpp	/^DoubleParameter::~DoubleParameter ()$/;"	f	class:DoubleParameter
~GlobalParameters	coda/parameter/GlobalParameters.cpp	/^GlobalParameters::~GlobalParameters ()$/;"	f	class:GlobalParameters
~IntParameter	coda/parameter/Parameter.cpp	/^IntParameter::~IntParameter ()$/;"	f	class:IntParameter
~Matrix	coda/linalg/Matrix_impl.h	/^inline Matrix<eT>::~Matrix()$/;"	f	class:Matrix
~MatrixCwiseExpr	coda/linalg/CwiseExpr_impl.h	/^MatrixCwiseExpr<T1, T2, op_type>::~MatrixCwiseExpr()$/;"	f	class:MatrixCwiseExpr
~MatrixCwiseOp	coda/linalg/CwiseOp_impl.h	/^MatrixCwiseOp<T1, op_type>::~MatrixCwiseOp()$/;"	f	class:MatrixCwiseOp
~MatrixExpr	coda/linalg/Expr_impl.h	/^inline MatrixExpr<T1,T2,op_type>::~MatrixExpr()$/;"	f	class:MatrixExpr
~MatrixOp	coda/linalg/Op_impl.h	/^MatrixOp<T1, op_type>::~MatrixOp()$/;"	f	class:MatrixOp
~Parameter	coda/parameter/Parameter.cpp	/^Parameter::~Parameter ()$/;"	f	class:Parameter
~Parameters	coda/parameter/Parameters.cpp	/^Parameters::~Parameters ()$/;"	f	class:Parameters
~StringParameter	coda/parameter/Parameter.cpp	/^StringParameter::~StringParameter ()$/;"	f	class:StringParameter
~Timer	coda/log/Timer.cpp	/^Timer::~Timer ()$/;"	f	class:Timer
~Vector	coda/linalg/Vector_impl.h	/^inline Vector<eT>::~Vector()$/;"	f	class:Vector
~VectorCwiseExpr	coda/linalg/CwiseExpr_impl.h	/^VectorCwiseExpr<T1, T2, op_type>::~VectorCwiseExpr()$/;"	f	class:VectorCwiseExpr
~VectorCwiseOp	coda/linalg/CwiseOp_impl.h	/^VectorCwiseOp<T1, op_type>::~VectorCwiseOp()$/;"	f	class:VectorCwiseOp
